diff --git a/src/backend/ProcessLauncher.cpp b/src/backend/ProcessLauncher.cpp
index 9bd09a6f..50e1ef25 100644
--- a/src/backend/ProcessLauncher.cpp
+++ b/src/backend/ProcessLauncher.cpp
@@ -29,8 +29,10 @@
 #include "platform/AndroidHelpers.h"
 #endif
 
+#include <QtGlobal>
 #include <QDir>
 #include <QUrl>
+#include <QFileInfo>
 #include <QRegularExpression>
 
 
@@ -148,6 +150,30 @@ QString abs_workdir(const QString& workdir, const QString& base_dir, const QStri
 
     return ::clean_abs_path(QFileInfo(base_dir, workdir));
 }
+
+bool is_launch_cmd_local(const QString& launch_cmd)
+{
+    // If launch_cmd is an absolute path, let's check if the file exists or not
+    if (contains_slash(launch_cmd)) {
+        QFileInfo fileInfo(launch_cmd);
+        return fileInfo.exists();
+    }
+
+    // Check if the launch_cmd is in path
+#ifdef Q_OS_WINDOWS
+    QChar path_separator = ';'
+#else
+    QChar path_separator = ':';
+#endif
+
+    QStringList paths = qEnvironmentVariable("PATH").split(path_separator);
+    foreach (const QString& path, paths) {
+        QFileInfo fileInfo(path + QDir::separator() + launch_cmd);
+        if (fileInfo.exists())
+            return true;
+    }
+    return false;
+}
 } // namespace helpers
 
 
@@ -163,11 +189,12 @@ void ProcessLauncher::onLaunchRequested(const model::GameFile* q_gamefile)
     const model::GameFile& gamefile = *q_gamefile;
     const model::Game& game = *gamefile.parentGame();
 
-    const QString raw_launch_cmd =
-#if defined(Q_OS_LINUX) && defined(PEGASUS_INSIDE_FLATPAK)
-        QLatin1String("flatpak-spawn --host ") + game.launchCmd();
+#if defined(Q_OS_LINUX)// && defined(PEGASUS_INSIDE_FLATPAK)
+    const QString raw_launch_cmd = (helpers::is_launch_cmd_local(game.launchCmd().split(' ')[0]))
+                                       ? game.launchCmd()
+                                       : QLatin1String("flatpak-spawn --host ") + game.launchCmd();
 #else
-        game.launchCmd();
+    const QString raw_launch_cmd = game.launchCmd();
 #endif
 
 
