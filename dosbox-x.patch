diff --git a/include/notification.h b/include/notification.h
new file mode 100644
index 000000000..88f7bda87
--- /dev/null
+++ b/include/notification.h
@@ -0,0 +1,16 @@
+#define NOTIFICATION_MAX_CHARS   91
+#define NOTIFICATION_TIMEOUT      2
+
+struct SDL_Notification {
+    bool enabled = false;
+    bool redraw = false;
+    char message[NOTIFICATION_MAX_CHARS];
+    long start;
+    unsigned int scale = 1;
+};
+
+extern SDL_Notification notification;
+void Notification_setScale(unsigned int s);
+unsigned int Notification_getScale();
+void Notification_send(const char *message);
+void Notification_check();
diff --git a/src/gui/Makefile.am b/src/gui/Makefile.am
index 4e16f7139..73d1f8f10 100644
--- a/src/gui/Makefile.am
+++ b/src/gui/Makefile.am
@@ -2,6 +2,7 @@ AM_CPPFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/src/aviwriter "-DRESDIR=\"
 
 noinst_LIBRARIES = libgui.a
 libgui_a_SOURCES = \
+	notification.cpp \
 	sdlmain_linux.cpp \
 	sdlmain.cpp sdl_mapper.cpp dosbox_logo.h \
 	render.cpp render_scalers.cpp render_scalers.h \
diff --git a/src/gui/notification.cpp b/src/gui/notification.cpp
new file mode 100644
index 000000000..37aed2a8b
--- /dev/null
+++ b/src/gui/notification.cpp
@@ -0,0 +1,30 @@
+#include <ctime>
+#include <string.h>
+
+#include "notification.h"
+
+SDL_Notification notification;
+
+unsigned int Notification_getScale() {
+    return notification.scale;
+}
+
+void Notification_setScale(unsigned int s) {
+    if (s == 0) notification.scale = 1;
+    if (s >= 2) notification.scale = 2;
+}
+
+void Notification_send(const char *message) {
+    strncpy(notification.message, message, NOTIFICATION_MAX_CHARS);
+    notification.message[NOTIFICATION_MAX_CHARS] = '\0';
+    notification.enabled = notification.redraw = true;
+    notification.start = std::time(nullptr);
+}
+
+void Notification_check() {
+    if (notification.enabled) {
+        notification.redraw = false;
+        if ((notification.start + NOTIFICATION_TIMEOUT) < std::time(nullptr))
+            notification.enabled = false;
+    }
+}
diff --git a/src/gui/render.cpp b/src/gui/render.cpp
index b72a191ec..a1caab159 100644
--- a/src/gui/render.cpp
+++ b/src/gui/render.cpp
@@ -52,6 +52,8 @@
 #include <output/output_tools_xbrz.h>
 #include <output/output_opengl.h>
 
+#include "notification.h"
+
 extern bool video_debug_overlay;
 
 Render_t                                render;
@@ -273,7 +275,7 @@ static void RENDER_DrawLine_countdown(const void * s) {
 #endif
 
 static void RENDER_StartLineHandler(const void * s) {
-    if (RENDER_DrawLine_scanline_cacheHit(s)) { // line has not changed
+    if (!notification.redraw && RENDER_DrawLine_scanline_cacheHit(s)) { // line has not changed
         render.scale.cacheRead += render.scale.cachePitch;
         Scaler_ChangedLines[0] += Scaler_Aspect[ render.scale.inLine ];
         render.scale.inLine++;
@@ -322,6 +324,7 @@ static void RENDER_ClearCacheHandler(const void * src) {
 extern void GFX_SetTitle(int32_t cycles, int frameskip, Bits timing, bool paused);
 
 bool RENDER_StartUpdate(void) {
+
     if (GCC_UNLIKELY(render.updating))
         return false;
     if (GCC_UNLIKELY(!render.active))
@@ -357,7 +360,7 @@ bool RENDER_StartUpdate(void) {
             render.fullFrame = true;
         } else {
             RENDER_DrawLine = RENDER_StartLineHandler;
-            if (GCC_UNLIKELY(CaptureState & (CAPTURE_IMAGE|CAPTURE_VIDEO))) 
+            if (!notification.redraw || GCC_UNLIKELY(CaptureState & (CAPTURE_IMAGE|CAPTURE_VIDEO))) 
                 render.fullFrame = true;
             else
                 render.fullFrame = false;
diff --git a/src/gui/sdlmain.cpp b/src/gui/sdlmain.cpp
index 7f93f4c97..14d1e0762 100644
--- a/src/gui/sdlmain.cpp
+++ b/src/gui/sdlmain.cpp
@@ -248,6 +248,8 @@ extern "C" void sdl1_hax_macosx_highdpi_set_enable(const bool enable);
 #include "build_timestamp.h"
 #include "version_string.h"
 
+#include "notification.h"
+
 #if C_OPENGL
 namespace gl2 {
 extern PFNGLATTACHSHADERPROC glAttachShader;
@@ -1846,6 +1848,31 @@ void GFX_TearDown(void) {
 bool DOSBox_isMenuVisible(void);
 void MenuShadeRect(int x,int y,int w,int h);
 void MenuDrawRect(int x,int y,int w,int h,Bitu color);
+void MenuDrawText(int x,int y,const char *text,Bitu color,bool check=false);
+void GFX_DrawNotification();
+void GFX_Notification_setScale(unsigned int scale) {
+    LOG_MSG("%d", scale);
+    Notification_setScale(scale);
+}
+void GFX_DrawNotification() {
+    if (notification.redraw)
+        notification.redraw = false;
+    else 
+        Notification_check();
+
+    if (notification.enabled) {
+        int barHeight = Notification_getScale() * 16;
+        int x, y, w, h;
+        
+        x = (sdl.surface->w / 2) - (sdl.clip.w / 2);
+        y = sdl.surface->h - barHeight;
+        w = sdl.clip.w;
+        h = barHeight;
+
+        MenuDrawRect(x, y, w, h, GFX_GetRGB(64, 64, 64));
+        MenuDrawText(x, y,notification.message,GFX_GetRGB(255, 255, 255));
+    }
+}
 void GFX_DrawSDLMenu(DOSBoxMenu &menu, DOSBoxMenu::displaylist &dl) {
     if (!menu.needsRedraw() || (sdl.updating && !OpenGL_using())) {
         return;
@@ -2903,7 +2930,7 @@ bool GFX_StartUpdate(uint8_t* &pixels,Bitu &pitch)
 {
     if (!sdl.active || sdl.updating)
         return false;
-
+        
     switch (sdl.desktop.type)
     {
         case SCREEN_SURFACE:
diff --git a/src/misc/savestates.cpp b/src/misc/savestates.cpp
index 4479c1478..10c1deae5 100644
--- a/src/misc/savestates.cpp
+++ b/src/misc/savestates.cpp
@@ -36,6 +36,8 @@
 #include "../libs/tinyfiledialogs/tinyfiledialogs.h"
 #endif
 
+#include "notification.h"
+
 extern unsigned int page;
 extern int autosave_last[10], autosave_count;
 extern std::string autosave_name[10], savefilename;
@@ -144,6 +146,13 @@ size_t GetGameState(void) {
     return currentSlot;
 }
 
+void NotifySlotAction(char const *message, size_t currentSlot) {
+    char buffer[NOTIFICATION_MAX_CHARS];
+    std::string name = SaveState::instance().getName(currentSlot, false);
+    snprintf(buffer, NOTIFICATION_MAX_CHARS, "%s%d %s", message, (int)currentSlot + 1, name.c_str());
+    Notification_send(buffer);
+}
+
 void SetGameState(int value) {
 	char name[6]="slot0";
 	name[4]='0'+(char)(currentSlot%SaveState::SLOT_COUNT);
@@ -215,6 +224,7 @@ void NextSaveSlot(bool pressed) {
 
     const bool emptySlot = SaveState::instance().isEmpty(currentSlot);
     LOG_MSG("Active save slot: %d %s", (int)currentSlot + 1, emptySlot ? "[Empty]" : "");
+    NotifySlotAction("Slot: ", currentSlot);
 }
 
 void PreviousSaveSlot(bool pressed) {
@@ -231,6 +241,7 @@ void PreviousSaveSlot(bool pressed) {
 
     const bool emptySlot = SaveState::instance().isEmpty(currentSlot);
     LOG_MSG("Active save slot: %d %s", (int)currentSlot + 1, emptySlot ? "[Empty]" : "");
+    NotifySlotAction("Slot: ", currentSlot);
 }
 
 void LastAutoSaveSlot(bool pressed) {
@@ -1302,8 +1313,10 @@ delete_all:
 	remove(save2.c_str());
 	if (save_err)
 		notifyError("Failed to save the current state.");
-	else
+	else {
 		LOG_MSG("[%s]: Saved. (Slot %d)", getTime().c_str(), (int)slot+1);
+        NotifySlotAction("Saved slot: ", slot);
+    }
 }
 
 void savestatecorrupt(const char* part) {
@@ -1563,7 +1576,10 @@ delete_all:
 	remove(save2.c_str());
 	save2=temp+"Machine_Type";
 	remove(save2.c_str());
-	if (!load_err) LOG_MSG("[%s]: Loaded. (Slot %d)", getTime().c_str(), (int)slot+1);
+	if (!load_err) {
+	    LOG_MSG("[%s]: Loaded. (Slot %d)", getTime().c_str(), (int)slot+1);
+	    NotifySlotAction("Loaded slot: ", slot);
+	}
 }
 
 bool SaveState::isEmpty(size_t slot) const {
diff --git a/src/output/output_opengl.cpp b/src/output/output_opengl.cpp
index 253c1b635..8defdb192 100644
--- a/src/output/output_opengl.cpp
+++ b/src/output/output_opengl.cpp
@@ -24,6 +24,8 @@ extern "C" {
 #include "sdlmain.h"
 #include "render.h"
 
+#include "notification.h"
+
 using namespace std;
 
 extern Bitu frames;
@@ -226,6 +228,9 @@ retry:
         LOG_MSG("menuScale=%d", scale);
         mainMenu.setScale((unsigned int)scale);
 
+        void GFX_Notification_setScale(unsigned int scale);
+        GFX_Notification_setScale((unsigned int)scale);
+        
         if (mainMenu.isVisible() && !sdl.desktop.fullscreen && fixedHeight)
             fixedHeight -= mainMenu.menuBox.h;
     }
@@ -943,7 +948,8 @@ bool OUTPUT_OPENGL_StartUpdate(uint8_t* &pixels, Bitu &pitch)
 
 void OUTPUT_OPENGL_EndUpdate(const uint16_t *changedLines)
 {
-    if (!(sdl.must_redraw_all && changedLines == NULL)) 
+
+    if (notification.redraw || !(sdl.must_redraw_all && changedLines == NULL)) 
     {
         if (sdl_opengl.clear_countdown > 0)
         {
@@ -1045,7 +1051,7 @@ void OUTPUT_OPENGL_EndUpdate(const uint16_t *changedLines)
         }
         else if (changedLines) 
         {
-            if (changedLines[0] == sdl.draw.height)
+            if (!notification.redraw && changedLines[0] == sdl.draw.height)
                 return;
 
             Bitu y = 0, index = 0;
@@ -1074,7 +1080,7 @@ void OUTPUT_OPENGL_EndUpdate(const uint16_t *changedLines)
                 }
                 index++;
             }
-        } else
+        } else if (!notification.redraw)
             return;
         if (sdl_opengl.program_object) {
             glUniform1i(sdl_opengl.ruby.frame_count, sdl_opengl.actual_frame_count++);
@@ -1112,8 +1118,12 @@ void OUTPUT_OPENGL_EndUpdate(const uint16_t *changedLines)
 
             glBindTexture(GL_TEXTURE_2D, sdl_opengl.texture);
 #endif
+#if DOSBOXMENU_TYPE == DOSBOXMENU_SDLDRAW
+        void GFX_DrawNotification();
+        GFX_DrawNotification();
+#endif    
 
-            SDL_GL_SwapBuffers();
+        SDL_GL_SwapBuffers();
 
         if (!menu.hidecycles && !sdl.desktop.fullscreen) frames++;
     }
