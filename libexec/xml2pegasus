#!/usr/bin/python3
#
# Copyright (c) 2024 The DOSVault Team
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from datetime import datetime
import xml.etree.ElementTree as ET
import os
import sys
import re

all_image_files = []

def print_collection(launch_file_path):
    print("collection: DOS")
    print("launch: " + launch_file_path + " {file.path}")
    print()
    

def get_all_dirs(directory):
    all_dirs = []
    for entry in os.scandir(directory):
        if entry.is_dir():
            all_dirs.append(os.path.join(directory, entry.name))
            
    return all_dirs


def get_all_files(directory):
    all_files = []
    for root, dirs, files in os.walk(directory):
        for filename in files:
            all_files.append(os.path.join(root, filename))
            
    return all_files
    
    
def get_case_sensitive_file(root, path):
    file = os.path.join(root, path)
    if os.path.exists(os.path.join(root, path)):
        return path
        
    file_c = file.casefold()
    for d in all_metadata_dirs:
        if d.casefold() == os.path.dirname(file_c):
            result = re.sub(root + "/", "", os.path.join(d, os.path.basename(path)))
            return result

           
def search_files(target_string):
    titlescreen = None
    box_front = None
    for filename in all_image_files:
        if target_string in filename:
            image_file = re.sub(r"^.*eXoDOS/Images/", "Images/", filename)
            
            asset=''
            if (re.match(r".*/Screenshot - Gameplay/.*", image_file)):
                asset="asset.screenshot"
            elif (re.match(r".*/Box - Back/.*", image_file)):
                asset="asset.box_back"
            elif (re.match(r".*/Box - Front/.*", image_file)):
                asset="asset.box_front"
                box_front = image_file
            elif (re.match(r".*/Screenshot - Game Title/.*", image_file)):
                asset="asset.titlescreen"
                titlescreen = image_file
            elif (re.match(r".*/Clear Logo/.*", image_file)):
                asset="asset.logo"
            elif (re.match(r".*/(Fanart - )?Background/.*", image_file)):
                asset="asset.background"
            elif (re.match(r".*/(Fanart - )?Disc/.*", image_file)):
                asset="asset.disc"
            elif (re.match(r".*/(Fanart - )?Banner/.*", image_file)):
                asset="asset.banner"
            
            if asset != '':
                print(f"{asset}: {image_file}")
            else:
                print(f"x-asset: {image_file}")
                    
    if titlescreen is not None and box_front is None:
        print(f"asset.box_front: {titlescreen}")

if len(sys.argv) != 4:
    print("Usage: xml2pegasus <xml-file> <dosvault-dir> <launch.sh>")
    exit(1)
   
xml_file = sys.argv[1]
dosvault_dir = sys.argv[2]
exodos_dir = dosvault_dir + "/eXoDOS"
launch_file_path = sys.argv[3]

tree = ET.parse(xml_file)
root = tree.getroot()

print_collection(launch_file_path)

all_image_files = get_all_files(exodos_dir + "/Images/")
all_metadata_dirs = get_all_dirs(exodos_dir + "/eXo/eXoDOS/!dos")
i = 0
print("\033[s", file=sys.stderr)
for game in root.findall("Game"):
    title = game.find("Title").text
    dt_object = datetime.fromisoformat(game.find("ReleaseDate").text)
    year = dt_object.year
    file = get_case_sensitive_file(exodos_dir, game.find("RootFolder").text.replace("\\","/") + '/dosbox.conf')
    developer = game.find("Developer").text
    publisher = game.find("Publisher").text
    genre = game.find("Genre").text
    if genre is not None:
        genre = genre.replace(";",",").replace(" / ", ",")
    notes = game.find("Notes").text
    if notes is not None:
        description = game.find("Notes").text.replace("\n\n", "\n").replace("\n", "\n  .\n  ")
    else:
        description = ''
    rating_pct = int(float(game.find("CommunityStarRating").text)*20)
    rating = f"{rating_pct}%"

    print(f"game: {title}")
    print(f"sort_title: {title}")
    print(f"file: {file}")
    print(f"developer: {developer}")
    print(f"publisher: {publisher}")    
    print(f"release: {year}")
    print(f"genres: {genre}")
    print(f"description: {description}")
    print(f"rating: {rating}")
    print(f"x-scrape-source: xml2pegasus")
    search_files("/" + re.sub(r"['<>:\"/\\\|?*]", "_", (title + "-")))
    print()
    i = i + 1
    print(f"\033[u{i}", file=sys.stderr)

